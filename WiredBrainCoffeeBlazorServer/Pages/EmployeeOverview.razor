@page "/employees/list"
@page "/employees/list/{currentPage:int?}"
@inject IDbContextFactory<EmployeeManagerDBContext> ContextFactory
@inject NavigationManager NavigationManager 
<PageTitle>Employees</PageTitle>

<h1>Welcome to the Harmonic Motion Lab Photos</h1>

<div>
    <a href="\HarmonicMotionLabPhotos\MassOnASpring.jpg" class="logo"> </a>
    <h5>Simple Pendulum</h5>
</div>

<div>
    <a href="HarmonicMotionLabPhotos\SimplePendulum.jpg"> </a>
    <h5>Simple Pendulum</h5>

    <p>Just kidding now we will list employees</p>
</div>

@if(Employees is null)
{
    <div>Loading...there are no employees</div>
}
else {
    <ul class="pagination mt-3">
        <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
            <a class="page-link" href="/employees/list/@(CurrentPage -1)">Previous</a>
        </li>
        @for (int i = 1; i <= TotalPages; i++)
        {
            <li class="page-item @(CurrentPage == i ? "active" : "")">
                <a class="page-link" href="/employees/list/@i">@i</a>
            </li>
        }
        <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
            <a class="page-link" href="/employees/list/@(CurrentPage + 1)">Next</a>
        </li>
    </ul>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Firstname</th>
                <th>Lastname</th>
                <th>IsDeveloper</th>
                <th>Department</th>

            </tr>
        </thead>

        <tbody>
            @foreach(var employee in Employees)
            {
                <tr>
                    <td>@employee.FirstName</td>
                    <td>@employee.LastName</td>
                    <td>@employee.IsDeveloper</td>
                    <td>@employee.Department?.Name</td>
                </tr>
            }
        </tbody>
    </table>

    
}

@code {
    [Parameter]
    public int? CurrentPage { get; set; }

    private Employee[]? Employees { get; set; }

    private int TotalPages { get; set; }

    private const int ItemsPerPage = 4;
    //protected override async Task OnInitializedAsync()
    protected override async Task OnParametersSetAsync()
    {
        if(CurrentPage is null or < 1)
        {
            NavigationManager.NavigateTo("/employees/list/1");
            return;
        }
        using var context = ContextFactory.CreateDbContext();

        var employeeCount = await context.Employees.CountAsync();
        TotalPages = employeeCount == 0
            ? 1
            :(int)Math.Ceiling((double)employeeCount / ItemsPerPage);

        //if we are given too large a page, go to the last valid page
        if (CurrentPage > TotalPages)
        {
            NavigationManager.NavigateTo($"/employees/list/{TotalPages}");
            return;
        }

        var itemsToSkip = (CurrentPage.Value - 1) *ItemsPerPage;

        Employees = await context.Employees
                .Include(emp => emp.Department)
                .OrderBy(emp => emp.FirstName)
                .Skip(itemsToSkip)
                .Take(ItemsPerPage)
                .ToArrayAsync();
    }
}



<SurveyPrompt Title="How is Blazor working for you?" />
